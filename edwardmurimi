{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "93bedace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: textblob in ./project_env/lib/python3.8/site-packages (0.15.3)\n",
      "Requirement already satisfied: nltk>=3.1 in ./project_env/lib/python3.8/site-packages (from textblob) (3.5)\n",
      "Requirement already satisfied: click in ./project_env/lib/python3.8/site-packages (from nltk>=3.1->textblob) (7.1.2)\n",
      "Requirement already satisfied: regex in ./project_env/lib/python3.8/site-packages (from nltk>=3.1->textblob) (2021.3.17)\n",
      "Requirement already satisfied: joblib in ./project_env/lib/python3.8/site-packages (from nltk>=3.1->textblob) (1.0.1)\n",
      "Requirement already satisfied: tqdm in ./project_env/lib/python3.8/site-packages (from nltk>=3.1->textblob) (4.59.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install textblob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7557a8fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tweepy in ./project_env/lib/python3.8/site-packages (3.10.0)\n",
      "Requirement already satisfied: six>=1.10.0 in ./project_env/lib/python3.8/site-packages (from tweepy) (1.15.0)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in ./project_env/lib/python3.8/site-packages (from tweepy) (1.3.0)\n",
      "Requirement already satisfied: requests[socks]>=2.11.1 in ./project_env/lib/python3.8/site-packages (from tweepy) (2.25.1)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in ./project_env/lib/python3.8/site-packages (from requests-oauthlib>=0.7.0->tweepy) (3.1.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in ./project_env/lib/python3.8/site-packages (from requests[socks]>=2.11.1->tweepy) (2020.12.5)\n",
      "Requirement already satisfied: idna<3,>=2.5 in ./project_env/lib/python3.8/site-packages (from requests[socks]>=2.11.1->tweepy) (2.10)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in ./project_env/lib/python3.8/site-packages (from requests[socks]>=2.11.1->tweepy) (1.26.4)\n",
      "Requirement already satisfied: chardet<5,>=3.0.2 in ./project_env/lib/python3.8/site-packages (from requests[socks]>=2.11.1->tweepy) (4.0.0)\n",
      "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6; extra == \"socks\" in ./project_env/lib/python3.8/site-packages (from requests[socks]>=2.11.1->tweepy) (1.7.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install tweepy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2f04b1f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from textblob import TextBlob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8a768342",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3fc8c604",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tweepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6060f5bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in ./project_env/lib/python3.8/site-packages (3.4.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in ./project_env/lib/python3.8/site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in ./project_env/lib/python3.8/site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in ./project_env/lib/python3.8/site-packages (from matplotlib) (2.8.1)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in ./project_env/lib/python3.8/site-packages (from matplotlib) (2.4.7)\n",
      "Requirement already satisfied: numpy>=1.16 in ./project_env/lib/python3.8/site-packages (from matplotlib) (1.20.2)\n",
      "Requirement already satisfied: pillow>=6.2.0 in ./project_env/lib/python3.8/site-packages (from matplotlib) (8.2.0)\n",
      "Requirement already satisfied: six in ./project_env/lib/python3.8/site-packages (from cycler>=0.10->matplotlib) (1.15.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b614f553",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f3f5781b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in ./project_env/lib/python3.8/site-packages (1.2.3)\n",
      "Requirement already satisfied: numpy>=1.16.5 in ./project_env/lib/python3.8/site-packages (from pandas) (1.20.2)\n",
      "Requirement already satisfied: pytz>=2017.3 in ./project_env/lib/python3.8/site-packages (from pandas) (2021.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in ./project_env/lib/python3.8/site-packages (from pandas) (2.8.1)\n",
      "Requirement already satisfied: six>=1.5 in ./project_env/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0126079d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "af28c620",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fc5784c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a61fa1dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pycountry in ./project_env/lib/python3.8/site-packages (20.7.3)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install pycountry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e1bae6c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pycountry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "975e5f1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c19c41f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e6f041ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wordcloud in ./project_env/lib/python3.8/site-packages (1.8.1)\n",
      "Requirement already satisfied: matplotlib in ./project_env/lib/python3.8/site-packages (from wordcloud) (3.4.1)\n",
      "Requirement already satisfied: pillow in ./project_env/lib/python3.8/site-packages (from wordcloud) (8.2.0)\n",
      "Requirement already satisfied: numpy>=1.6.1 in ./project_env/lib/python3.8/site-packages (from wordcloud) (1.20.2)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (2.8.1)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (0.10.0)\n",
      "Requirement already satisfied: six>=1.5 in ./project_env/lib/python3.8/site-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.15.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install wordcloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f9eb023a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wordcloud in ./project_env/lib/python3.8/site-packages (1.8.1)\n",
      "Requirement already satisfied: matplotlib in ./project_env/lib/python3.8/site-packages (from wordcloud) (3.4.1)\n",
      "Requirement already satisfied: numpy>=1.6.1 in ./project_env/lib/python3.8/site-packages (from wordcloud) (1.20.2)\n",
      "Requirement already satisfied: pillow in ./project_env/lib/python3.8/site-packages (from wordcloud) (8.2.0)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (2.8.1)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in ./project_env/lib/python3.8/site-packages (from matplotlib->wordcloud) (0.10.0)\n",
      "Requirement already satisfied: six>=1.5 in ./project_env/lib/python3.8/site-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.15.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install wordcloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "29fabbb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from wordcloud import WordCloud, STOPWORDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b0c05ade",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a50776f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7613cb7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: langdetect in ./project_env/lib/python3.8/site-packages (1.0.8)\r\n",
      "Requirement already satisfied: six in ./project_env/lib/python3.8/site-packages (from langdetect) (1.15.0)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install langdetect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e3773dc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langdetect import detect\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "10c0ed1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "58c11cd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pycountry\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "44ae4f26",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langdetect import detect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6d970e18",
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.stem import SnowballStemmer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "72e5c5b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a1d23de1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sklearn in ./project_env/lib/python3.8/site-packages (0.0)\n",
      "Requirement already satisfied: scikit-learn in ./project_env/lib/python3.8/site-packages (from sklearn) (0.24.1)\n",
      "Requirement already satisfied: scipy>=0.19.1 in ./project_env/lib/python3.8/site-packages (from scikit-learn->sklearn) (1.6.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in ./project_env/lib/python3.8/site-packages (from scikit-learn->sklearn) (2.1.0)\n",
      "Requirement already satisfied: numpy>=1.13.3 in ./project_env/lib/python3.8/site-packages (from scikit-learn->sklearn) (1.20.2)\n",
      "Requirement already satisfied: joblib>=0.11 in ./project_env/lib/python3.8/site-packages (from scikit-learn->sklearn) (1.0.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "47a50f59",
   "metadata": {},
   "outputs": [],
   "source": [
    "consumerKey = \"KkFRbQpwS8JncbWNnM0v8BV78\"\n",
    "consumerSecret = \"70xy7O72aLTx1hX3vqCGRpezhYYBqQaCKyLhO05mhTb1oH0Ceq\"\n",
    "accessToken = \"1183387752-PvTJTXRS8MZVaTkAlcLGWxo71j4Iz3xUNbLia4w\"\n",
    "accessTokenSecret = \"x0nMDC15uin9l5ZQlu1byqGaXkrD3bSkENIi1hOwJlCkn\"\n",
    "\n",
    "auth = tweepy.OAuthHandler(consumerKey, consumerSecret)\n",
    "auth.set_access_token(accessToken, accessTokenSecret)\n",
    "api = tweepy.API(auth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "474d689f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter keyword or hashtag to search: #RIPCovidVictims\n",
      "Please enter how many tweets to analyze: 20\n"
     ]
    }
   ],
   "source": [
    "#Sentiment Analysis\n",
    "\n",
    "def percentage(part,whole):\n",
    "    return 100 * float(part)/float(whole) \n",
    "\n",
    "keyword = input(\"Please enter keyword or hashtag to search: \")\n",
    "noOfTweet = int(input (\"Please enter how many tweets to analyze: \"))\n",
    "\n",
    "\n",
    "tweets = tweepy.Cursor(api.search, q=keyword).items(noOfTweet)\n",
    "positive  = 0\n",
    "negative = 0\n",
    "neutral = 0\n",
    "polarity = 0\n",
    "tweet_list = []\n",
    "neutral_list = []\n",
    "negative_list = []\n",
    "positive_list = []\n",
    "\n",
    "for tweet in tweets:\n",
    "    \n",
    "    #print(tweet.text)\n",
    "    tweet_list.append(tweet.text)\n",
    "    analysis = TextBlob(tweet.text)\n",
    "    score = SentimentIntensityAnalyzer().polarity_scores(tweet.text)\n",
    "    neg = score['neg']\n",
    "    neu = score['neu']\n",
    "    pos = score['pos']\n",
    "    comp = score['compound']\n",
    "    polarity += analysis.sentiment.polarity\n",
    "    \n",
    "    if neg > pos:\n",
    "        negative_list.append(tweet.text)\n",
    "        negative += 1\n",
    "\n",
    "    elif pos > neg:\n",
    "        positive_list.append(tweet.text)\n",
    "        positive += 1\n",
    "    \n",
    "    elif pos == neg:\n",
    "        neutral_list.append(tweet.text)\n",
    "        neutral += 1\n",
    "\n",
    "positive = percentage(positive, noOfTweet)\n",
    "negative = percentage(negative, noOfTweet)\n",
    "neutral = percentage(neutral, noOfTweet)\n",
    "polarity = percentage(polarity, noOfTweet)\n",
    "positive = format(positive, '.1f')\n",
    "negative = format(negative, '.1f')\n",
    "neutral = format(neutral, '.1f')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ec419b32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total number:  20\n",
      "positive number:  10\n",
      "negative number:  3\n",
      "neutral number:  7\n"
     ]
    }
   ],
   "source": [
    "#Number of Tweets (Total, Positive, Negative, Neutral)\n",
    "tweet_list = pd.DataFrame(tweet_list)\n",
    "neutral_list = pd.DataFrame(neutral_list)\n",
    "negative_list = pd.DataFrame(negative_list)\n",
    "positive_list = pd.DataFrame(positive_list)\n",
    "print(\"total number: \",len(tweet_list))\n",
    "print(\"positive number: \",len(positive_list))\n",
    "print(\"negative number: \", len(negative_list))\n",
    "print(\"neutral number: \",len(neutral_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "58c8f0dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RT @alberto_januzaj: We can never forget his c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Digital Comrade is FREE and Open marketplace f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>RT @ItsNyambane: Robin Njogu was a consummate ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>RT @teddyeugene: To all those who have lost th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>RT @KeCamera: Canon EOS 80D DSLR Camera with 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    0\n",
       "0   RT @mtaabuzz: Man killed after walking into gi...\n",
       "1   RT @mtaabuzz: Man killed after walking into gi...\n",
       "2   RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...\n",
       "3   RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...\n",
       "4   RT @alberto_januzaj: We can never forget his c...\n",
       "5   RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...\n",
       "6   Digital Comrade is FREE and Open marketplace f...\n",
       "7   RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...\n",
       "8   RT @mtaabuzz: Man killed after walking into gi...\n",
       "9   https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...\n",
       "10  RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...\n",
       "11  RT @ItsNyambane: Robin Njogu was a consummate ...\n",
       "12  RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...\n",
       "13  RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...\n",
       "14  RT @teddyeugene: To all those who have lost th...\n",
       "15  HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...\n",
       "16  RT @KeCamera: Canon EOS 80D DSLR Camera with 1...\n",
       "17  Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...\n",
       "18  Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...\n",
       "19  RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS..."
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "47e50093",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweet_list.drop_duplicates(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "af2bf930",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...</td>\n",
       "      <td>RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...</td>\n",
       "      <td>RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RT @alberto_januzaj: We can never forget his c...</td>\n",
       "      <td>RT @alberto_januzaj: We can never forget his c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...</td>\n",
       "      <td>RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Digital Comrade is FREE and Open marketplace f...</td>\n",
       "      <td>Digital Comrade is FREE and Open marketplace f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...</td>\n",
       "      <td>https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>RT @ItsNyambane: Robin Njogu was a consummate ...</td>\n",
       "      <td>RT @ItsNyambane: Robin Njogu was a consummate ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...</td>\n",
       "      <td>RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>RT @teddyeugene: To all those who have lost th...</td>\n",
       "      <td>RT @teddyeugene: To all those who have lost th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...</td>\n",
       "      <td>HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>RT @KeCamera: Canon EOS 80D DSLR Camera with 1...</td>\n",
       "      <td>RT @KeCamera: Canon EOS 80D DSLR Camera with 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...</td>\n",
       "      <td>Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...</td>\n",
       "      <td>Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    0  \\\n",
       "0   RT @mtaabuzz: Man killed after walking into gi...   \n",
       "2   RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...   \n",
       "3   RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...   \n",
       "4   RT @alberto_januzaj: We can never forget his c...   \n",
       "5   RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...   \n",
       "6   Digital Comrade is FREE and Open marketplace f...   \n",
       "7   RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...   \n",
       "9   https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...   \n",
       "11  RT @ItsNyambane: Robin Njogu was a consummate ...   \n",
       "12  RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...   \n",
       "14  RT @teddyeugene: To all those who have lost th...   \n",
       "15  HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...   \n",
       "16  RT @KeCamera: Canon EOS 80D DSLR Camera with 1...   \n",
       "17  Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...   \n",
       "18  Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...   \n",
       "\n",
       "                                                 text  \n",
       "0   RT @mtaabuzz: Man killed after walking into gi...  \n",
       "2   RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...  \n",
       "3   RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...  \n",
       "4   RT @alberto_januzaj: We can never forget his c...  \n",
       "5   RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...  \n",
       "6   Digital Comrade is FREE and Open marketplace f...  \n",
       "7   RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...  \n",
       "9   https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...  \n",
       "11  RT @ItsNyambane: Robin Njogu was a consummate ...  \n",
       "12  RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...  \n",
       "14  RT @teddyeugene: To all those who have lost th...  \n",
       "15  HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...  \n",
       "16  RT @KeCamera: Canon EOS 80D DSLR Camera with 1...  \n",
       "17  Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...  \n",
       "18  Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tw_list = pd.DataFrame(tweet_list)\n",
    "tw_list[\"text\"] = tw_list[0]\n",
    "tw_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6119968f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>text</th>\n",
       "      <th>polarity</th>\n",
       "      <th>subjectivity</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>neg</th>\n",
       "      <th>neu</th>\n",
       "      <th>pos</th>\n",
       "      <th>compound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "      <td>RT @mtaabuzz: Man killed after walking into gi...</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>negative</td>\n",
       "      <td>0.170</td>\n",
       "      <td>0.830</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.6705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...</td>\n",
       "      <td>RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...</td>\n",
       "      <td>0.018750</td>\n",
       "      <td>0.175000</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.829</td>\n",
       "      <td>0.171</td>\n",
       "      <td>0.5106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...</td>\n",
       "      <td>RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RT @alberto_januzaj: We can never forget his c...</td>\n",
       "      <td>RT @alberto_januzaj: We can never forget his c...</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.792</td>\n",
       "      <td>0.208</td>\n",
       "      <td>0.5371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...</td>\n",
       "      <td>RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.819444</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.736</td>\n",
       "      <td>0.264</td>\n",
       "      <td>0.8001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Digital Comrade is FREE and Open marketplace f...</td>\n",
       "      <td>Digital Comrade is FREE and Open marketplace f...</td>\n",
       "      <td>0.133333</td>\n",
       "      <td>0.433333</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.799</td>\n",
       "      <td>0.201</td>\n",
       "      <td>0.6166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "      <td>RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.568519</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.746</td>\n",
       "      <td>0.254</td>\n",
       "      <td>0.8001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...</td>\n",
       "      <td>https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>RT @ItsNyambane: Robin Njogu was a consummate ...</td>\n",
       "      <td>RT @ItsNyambane: Robin Njogu was a consummate ...</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...</td>\n",
       "      <td>RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>RT @teddyeugene: To all those who have lost th...</td>\n",
       "      <td>RT @teddyeugene: To all those who have lost th...</td>\n",
       "      <td>0.377778</td>\n",
       "      <td>0.677778</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.323</td>\n",
       "      <td>0.8126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...</td>\n",
       "      <td>HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.568519</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.726</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.8001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>RT @KeCamera: Canon EOS 80D DSLR Camera with 1...</td>\n",
       "      <td>RT @KeCamera: Canon EOS 80D DSLR Camera with 1...</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...</td>\n",
       "      <td>Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...</td>\n",
       "      <td>Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    0  \\\n",
       "0   RT @mtaabuzz: Man killed after walking into gi...   \n",
       "2   RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...   \n",
       "3   RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...   \n",
       "4   RT @alberto_januzaj: We can never forget his c...   \n",
       "5   RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...   \n",
       "6   Digital Comrade is FREE and Open marketplace f...   \n",
       "7   RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...   \n",
       "9   https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...   \n",
       "11  RT @ItsNyambane: Robin Njogu was a consummate ...   \n",
       "12  RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...   \n",
       "14  RT @teddyeugene: To all those who have lost th...   \n",
       "15  HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...   \n",
       "16  RT @KeCamera: Canon EOS 80D DSLR Camera with 1...   \n",
       "17  Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...   \n",
       "18  Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...   \n",
       "\n",
       "                                                 text  polarity  subjectivity  \\\n",
       "0   RT @mtaabuzz: Man killed after walking into gi... -0.200000      0.000000   \n",
       "2   RT @Okello_Kay: @I___amFinest @Liberal_KE Afri...  0.018750      0.175000   \n",
       "3   RT @FelicitysolarKE: Felicity Solar LiFeP04 BA...  0.000000      0.000000   \n",
       "4   RT @alberto_januzaj: We can never forget his c...  0.200000      0.300000   \n",
       "5   RT @ollyrutto: HELLO GUYS, TEXT, CALL OR WHATS...  0.500000      0.819444   \n",
       "6   Digital Comrade is FREE and Open marketplace f...  0.133333      0.433333   \n",
       "7   RT @ollyrutto: HI, TEXT, CALL OR WHATSAPP TO 0...  0.333333      0.568519   \n",
       "9   https://t.co/LLQcJzehN7\\n#GintasticEaster\\n#Ro...  0.000000      0.000000   \n",
       "11  RT @ItsNyambane: Robin Njogu was a consummate ...  0.375000      0.750000   \n",
       "12  RT @TheTomorrowTech: Sirui 50mm f/1.8 Anamorph...  0.400000      0.800000   \n",
       "14  RT @teddyeugene: To all those who have lost th...  0.377778      0.677778   \n",
       "15  HI, TEXT, CALL OR WHATSAPP TO 0701379754 FOR S...  0.333333      0.568519   \n",
       "16  RT @KeCamera: Canon EOS 80D DSLR Camera with 1...  0.400000      0.800000   \n",
       "17  Sirui 50mm f/1.8 Anamorphic 1.33x Lens (MFT Mo...  0.400000      0.800000   \n",
       "18  Canon EOS 80D DSLR Camera with 18-135mm Lens\\n...  0.400000      0.800000   \n",
       "\n",
       "   sentiment    neg    neu    pos  compound  \n",
       "0   negative  0.170  0.830  0.000   -0.6705  \n",
       "2   positive  0.000  0.829  0.171    0.5106  \n",
       "3    neutral  0.000  1.000  0.000    0.0000  \n",
       "4   positive  0.000  0.792  0.208    0.5371  \n",
       "5   positive  0.000  0.736  0.264    0.8001  \n",
       "6   positive  0.000  0.799  0.201    0.6166  \n",
       "7   positive  0.000  0.746  0.254    0.8001  \n",
       "9    neutral  0.000  1.000  0.000    0.0000  \n",
       "11   neutral  0.000  1.000  0.000    0.0000  \n",
       "12   neutral  0.000  1.000  0.000    0.0000  \n",
       "14  positive  0.077  0.600  0.323    0.8126  \n",
       "15  positive  0.000  0.726  0.274    0.8001  \n",
       "16   neutral  0.000  1.000  0.000    0.0000  \n",
       "17   neutral  0.000  1.000  0.000    0.0000  \n",
       "18   neutral  0.000  1.000  0.000    0.0000  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculating Negative, Positive, Neutral and Compound values\n",
    "\n",
    "tw_list[['polarity', 'subjectivity']] = tw_list['text'].apply(lambda Text: pd.Series(TextBlob(Text).sentiment))\n",
    "for index, row in tw_list['text'].iteritems():\n",
    "    score = SentimentIntensityAnalyzer().polarity_scores(row)\n",
    "    neg = score['neg']\n",
    "    neu = score['neu']\n",
    "    pos = score['pos']\n",
    "    comp = score['compound']\n",
    "    if neg > pos:\n",
    "        tw_list.loc[index, 'sentiment'] = \"negative\"\n",
    "    elif pos > neg:\n",
    "        tw_list.loc[index, 'sentiment'] = \"positive\"\n",
    "    else:\n",
    "        tw_list.loc[index, 'sentiment'] = \"neutral\"\n",
    "    tw_list.loc[index, 'neg'] = neg\n",
    "    tw_list.loc[index, 'neu'] = neu\n",
    "    tw_list.loc[index, 'pos'] = pos\n",
    "    tw_list.loc[index, 'compound'] = comp\n",
    "\n",
    "tw_list.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f667ca0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = ['Positive ['+str(positive)+'%]' , 'Neutral ['+str(neutral)+'%]','Negative ['+str(negative)+'%]']\n",
    "sizes = [positive, neutral, negative]\n",
    "colors = ['yellowgreen', 'blue','red']\n",
    "patches, texts = plt.pie(sizes,colors=colors, startangle=90)\n",
    "plt.style.use('default')\n",
    "plt.legend(labels)\n",
    "plt.title(\"Sentiment Analysis Result for keyword=  \"+keyword+\"\" )\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "138ce9de",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
